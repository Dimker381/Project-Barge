class Barge:
    def __init__(self, num_compartments, max_capacity):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ä–∂–∏ —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç—Å–µ–∫–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –±–æ—á–∫–∞–º
        self.compartments = [[] for _ in range(num_compartments + 1)]  # –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1
        self.capacity = max_capacity     # —ë–º–∫–æ—Å—Ç—å
        self.total_barrels = 0           # —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—á–µ–∫
        self.max_barrels = 0             # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        self.error = False
        self.error_message = ""

    def load(self, compartment, fuel_type):
        # –ü–æ–≥—Ä—É–∑–∫–∞ –±–æ—á–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç—Å–µ–∫
        self.compartments[compartment].append(fuel_type)
        self.total_barrels += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if self.total_barrels > self.capacity:
            self.error = True
            self.error_message = f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—á–µ–∫ –Ω–∞ –±–∞—Ä–∂–µ: {self.capacity}"

        self.max_barrels = max(self.max_barrels, self.total_barrels)

    def unload(self, compartment, fuel_type):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å–µ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç
        if not self.compartments[compartment]:
            self.error = True
            self.error_message = f"–û—à–∏–±–∫–∞: –æ—Ç—Å–µ–∫ {compartment} –ø—É—Å—Ç, –Ω–µ–ª—å–∑—è –∏–∑–≤–ª–µ—á—å –±–æ—á–∫—É."
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
        top_fuel = self.compartments[compartment][-1]
        if top_fuel != fuel_type:
            self.error = True
            self.error_message = (
                f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ {fuel_type}, –Ω–æ –≤ –æ—Ç—Å–µ–∫–µ {compartment} —Å–≤–µ—Ä—Ö—É {top_fuel}."
            )
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—á–∫–∏
        self.compartments[compartment].pop()
        self.total_barrels -= 1

    def process(self, operation, line_num=None):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        parts = operation.strip().split()
        if len(parts) != 3:
            self.error = True
            self.error_message = f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã."
            return

        action, a_str, b_str = parts
        if action not in ('+', '-'):
            self.error = True
            self.error_message = f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}'."
            return

        try:
            compartment = int(a_str)
            fuel_type = int(b_str)
        except ValueError:
            self.error = True
            self.error_message = f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: –Ω–æ–º–µ—Ä –æ—Ç—Å–µ–∫–∞ –∏ –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏."
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å–µ–∫–∞
        if not (1 <= compartment < len(self.compartments)):
            self.error = True
            self.error_message = f"–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –æ—Ç—Å–µ–∫–∞ {compartment} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
            return

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == '+':
            self.load(compartment, fuel_type)
        else:
            self.unload(compartment, fuel_type)

    def is_empty(self):
        return self.total_barrels == 0


def main():
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    print("üö¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã –±–∞—Ä–∂–∏.")
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
    print("–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ: N K P")
    print("–ì–¥–µ N ‚Äî —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π, K ‚Äî —á–∏—Å–ª–æ –æ—Ç—Å–µ–∫–æ–≤, P ‚Äî –º–∞–∫—Å–∏–º—É–º –±–æ—á–µ–∫.")
    print("–î–∞–ª–µ–µ N —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ '+ A B' –∏–ª–∏ '- A B'\n")

    try:
        # –í–≤–æ–¥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        n_k_p = input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è N K P —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").strip().split()
        if len(n_k_p) != 3:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        n, k, p = map(int, n_k_p)
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: N, K –∏ P –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥—Ä–∞–Ω–∏—Ü
    if not (1 <= n <= 100_000 and 1 <= k <= 100_000 and 1 <= p <= 100_000):
        print("‚ùå –û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è N, K –∏ P –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 100000.")
        return

    operations = []
    print(f"\n–í–≤–µ–¥–∏—Ç–µ {n} –æ–ø–µ—Ä–∞—Ü–∏–π:")
    for i in range(n):
        try:
            line = input(f"[{i+1}] >>> ").strip()
            operations.append(line)
        except EOFError:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –≤–≤–æ–¥–∞.")
            return

    barge = Barge(k, p)

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    for idx, op in enumerate(operations, start=1):
        barge.process(op, idx)
        if barge.error:
            print(f"\n‚ùå {barge.error_message}")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –ø–æ—Å–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if not barge.is_empty():
        print("\n‚ùå –ë–∞—Ä–∂–∞ –Ω–µ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return

    # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –æ—à–∏–±–æ–∫. –ú–∞–∫—Å–∏–º—É–º –±–æ—á–µ–∫ –Ω–∞ –±–æ—Ä—Ç—É: {barge.max_barrels}")


if __name__ == "__main__":
    main()
